openapi: 3.0.0
info:
  title: E-Com API
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
    description: Local development server    

paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                password:
                  type: string
                userType:
                  $ref: '#/components/schemas/UserType'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Bad request, invalid user data provided

  /auth/login:
    post:
      summary: Authenticate user
      description: Authenticate a user by providing credentials.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              example:
                token: your-auth-token
        '401':
          description: Unauthorized
        '404':
          description: Invalid email or password

  /seller/order:
    get:
      summary: Retrieve all orders for a specific seller
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error

  /seller/create-catalog:
    post:
      summary: Create a catalog for a specific seller
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      price:
                        type: number
      responses:
        '201':
          description: Catalog created
        '500':
          description: Server error 

  /buyer/list-of-sellers:
    get:
      summary: Retrieve a list of all sellers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Seller'
        '500':
          description: Error
    
  /buyer/seller-catalog/{seller_id}:
    get:
      summary: Retrieve the catalog for a specific seller
      security:
        - bearerAuth: []
      parameters:
        - name: seller_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object

  /buyer/create-order/{seller_id}:
    post:
      summary: Create an order for a specific seller
      security:
        - bearerAuth: []
      parameters:
        - name: seller_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productID:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Order created
            
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      properties:
        userName:
          type: string
        password:
          type: string
      required:
        - name
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string

    UserType:
      type: string
      enum: [BUYER, SELLER]
    
    Seller:
      type: object
      properties:
        _id:
          type: string
        userName:
          type: string
        userType:
          type: string
        __v:
          type: integer

    